<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="725.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="725.00"> </text><svg id="frames" x="10" width="1180"><g><title>_reconstruct (copy.py:280) (10 samples, 2.42%)</title><rect x="3.6232%" y="548" width="2.4155%" height="15" fill="rgb(227,0,7)"/><text x="3.8732%" y="558.50">_r..</text></g><g><title>deepcopy (copy.py:150) (10 samples, 2.42%)</title><rect x="3.6232%" y="564" width="2.4155%" height="15" fill="rgb(217,0,24)"/><text x="3.8732%" y="574.50">de..</text></g><g><title>_deepcopy_dict (copy.py:240) (10 samples, 2.42%)</title><rect x="3.6232%" y="580" width="2.4155%" height="15" fill="rgb(221,193,54)"/><text x="3.8732%" y="590.50">_d..</text></g><g><title>deepcopy (copy.py:180) (5 samples, 1.21%)</title><rect x="4.8309%" y="596" width="1.2077%" height="15" fill="rgb(248,212,6)"/><text x="5.0809%" y="606.50"></text></g><g><title>_reconstruct (copy.py:280) (5 samples, 1.21%)</title><rect x="4.8309%" y="612" width="1.2077%" height="15" fill="rgb(208,68,35)"/><text x="5.0809%" y="622.50"></text></g><g><title>deepcopy (copy.py:180) (11 samples, 2.66%)</title><rect x="3.6232%" y="532" width="2.6570%" height="15" fill="rgb(232,128,0)"/><text x="3.8732%" y="542.50">de..</text></g><g><title>_deepcopy_dict (copy.py:240) (15 samples, 3.62%)</title><rect x="3.1401%" y="516" width="3.6232%" height="15" fill="rgb(207,160,47)"/><text x="3.3901%" y="526.50">_dee..</text></g><g><title>deepcopy (copy.py:150) (41 samples, 9.90%)</title><rect x="3.1401%" y="500" width="9.9034%" height="15" fill="rgb(228,23,34)"/><text x="3.3901%" y="510.50">deepcopy (copy..</text></g><g><title>_deepcopy_list (copy.py:215) (25 samples, 6.04%)</title><rect x="7.0048%" y="516" width="6.0386%" height="15" fill="rgb(218,30,26)"/><text x="7.2548%" y="526.50">_deepcop..</text></g><g><title>_deepcopy_dict (copy.py:240) (7 samples, 1.69%)</title><rect x="17.3913%" y="644" width="1.6908%" height="15" fill="rgb(220,122,19)"/><text x="17.6413%" y="654.50"></text></g><g><title>deepcopy (copy.py:180) (7 samples, 1.69%)</title><rect x="17.3913%" y="660" width="1.6908%" height="15" fill="rgb(250,228,42)"/><text x="17.6413%" y="670.50"></text></g><g><title>_reconstruct (copy.py:280) (7 samples, 1.69%)</title><rect x="17.3913%" y="676" width="1.6908%" height="15" fill="rgb(240,193,28)"/><text x="17.6413%" y="686.50"></text></g><g><title>deepcopy (copy.py:150) (7 samples, 1.69%)</title><rect x="17.3913%" y="692" width="1.6908%" height="15" fill="rgb(216,20,37)"/><text x="17.6413%" y="702.50"></text></g><g><title>_reconstruct (copy.py:280) (33 samples, 7.97%)</title><rect x="13.0435%" y="516" width="7.9710%" height="15" fill="rgb(206,188,39)"/><text x="13.2935%" y="526.50">_reconstruc..</text></g><g><title>deepcopy (copy.py:150) (33 samples, 7.97%)</title><rect x="13.0435%" y="532" width="7.9710%" height="15" fill="rgb(217,207,13)"/><text x="13.2935%" y="542.50">deepcopy (c..</text></g><g><title>_deepcopy_dict (copy.py:240) (33 samples, 7.97%)</title><rect x="13.0435%" y="548" width="7.9710%" height="15" fill="rgb(231,73,38)"/><text x="13.2935%" y="558.50">_deepcopy_d..</text></g><g><title>deepcopy (copy.py:180) (25 samples, 6.04%)</title><rect x="14.9758%" y="564" width="6.0386%" height="15" fill="rgb(225,20,46)"/><text x="15.2258%" y="574.50">deepcopy..</text></g><g><title>_reconstruct (copy.py:280) (24 samples, 5.80%)</title><rect x="15.2174%" y="580" width="5.7971%" height="15" fill="rgb(210,31,41)"/><text x="15.4674%" y="590.50">_recons..</text></g><g><title>deepcopy (copy.py:150) (24 samples, 5.80%)</title><rect x="15.2174%" y="596" width="5.7971%" height="15" fill="rgb(221,200,47)"/><text x="15.4674%" y="606.50">deepcop..</text></g><g><title>_deepcopy_dict (copy.py:240) (23 samples, 5.56%)</title><rect x="15.4589%" y="612" width="5.5556%" height="15" fill="rgb(226,26,5)"/><text x="15.7089%" y="622.50">_deepco..</text></g><g><title>deepcopy (copy.py:150) (19 samples, 4.59%)</title><rect x="16.4251%" y="628" width="4.5894%" height="15" fill="rgb(249,33,26)"/><text x="16.6751%" y="638.50">deepc..</text></g><g><title>deepcopy (copy.py:180) (34 samples, 8.21%)</title><rect x="13.0435%" y="500" width="8.2126%" height="15" fill="rgb(235,183,28)"/><text x="13.2935%" y="510.50">deepcopy (c..</text></g><g><title>_simulate_random_game_for_state (mctsagent.py:219) (88 samples, 21.26%)</title><rect x="0.4831%" y="100" width="21.2560%" height="15" fill="rgb(221,5,38)"/><text x="0.7331%" y="110.50">_simulate_random_game_for_state (m..</text></g><g><title>deepcopy (copy.py:180) (88 samples, 21.26%)</title><rect x="0.4831%" y="116" width="21.2560%" height="15" fill="rgb(247,18,42)"/><text x="0.7331%" y="126.50">deepcopy (copy.py:180)</text></g><g><title>_reconstruct (copy.py:280) (88 samples, 21.26%)</title><rect x="0.4831%" y="132" width="21.2560%" height="15" fill="rgb(241,131,45)"/><text x="0.7331%" y="142.50">_reconstruct (copy.py:280)</text></g><g><title>deepcopy (copy.py:150) (88 samples, 21.26%)</title><rect x="0.4831%" y="148" width="21.2560%" height="15" fill="rgb(249,31,29)"/><text x="0.7331%" y="158.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_dict (copy.py:240) (88 samples, 21.26%)</title><rect x="0.4831%" y="164" width="21.2560%" height="15" fill="rgb(225,111,53)"/><text x="0.7331%" y="174.50">_deepcopy_dict (copy.py:240)</text></g><g><title>deepcopy (copy.py:150) (88 samples, 21.26%)</title><rect x="0.4831%" y="180" width="21.2560%" height="15" fill="rgb(238,160,17)"/><text x="0.7331%" y="190.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_list (copy.py:215) (88 samples, 21.26%)</title><rect x="0.4831%" y="196" width="21.2560%" height="15" fill="rgb(214,148,48)"/><text x="0.7331%" y="206.50">_deepcopy_list (copy.py:215)</text></g><g><title>deepcopy (copy.py:180) (88 samples, 21.26%)</title><rect x="0.4831%" y="212" width="21.2560%" height="15" fill="rgb(232,36,49)"/><text x="0.7331%" y="222.50">deepcopy (copy.py:180)</text></g><g><title>_reconstruct (copy.py:280) (88 samples, 21.26%)</title><rect x="0.4831%" y="228" width="21.2560%" height="15" fill="rgb(209,103,24)"/><text x="0.7331%" y="238.50">_reconstruct (copy.py:280)</text></g><g><title>deepcopy (copy.py:150) (88 samples, 21.26%)</title><rect x="0.4831%" y="244" width="21.2560%" height="15" fill="rgb(229,88,8)"/><text x="0.7331%" y="254.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_dict (copy.py:240) (88 samples, 21.26%)</title><rect x="0.4831%" y="260" width="21.2560%" height="15" fill="rgb(213,181,19)"/><text x="0.7331%" y="270.50">_deepcopy_dict (copy.py:240)</text></g><g><title>deepcopy (copy.py:180) (88 samples, 21.26%)</title><rect x="0.4831%" y="276" width="21.2560%" height="15" fill="rgb(254,191,54)"/><text x="0.7331%" y="286.50">deepcopy (copy.py:180)</text></g><g><title>_reconstruct (copy.py:280) (88 samples, 21.26%)</title><rect x="0.4831%" y="292" width="21.2560%" height="15" fill="rgb(241,83,37)"/><text x="0.7331%" y="302.50">_reconstruct (copy.py:280)</text></g><g><title>deepcopy (copy.py:150) (88 samples, 21.26%)</title><rect x="0.4831%" y="308" width="21.2560%" height="15" fill="rgb(233,36,39)"/><text x="0.7331%" y="318.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_dict (copy.py:240) (88 samples, 21.26%)</title><rect x="0.4831%" y="324" width="21.2560%" height="15" fill="rgb(226,3,54)"/><text x="0.7331%" y="334.50">_deepcopy_dict (copy.py:240)</text></g><g><title>deepcopy (copy.py:180) (88 samples, 21.26%)</title><rect x="0.4831%" y="340" width="21.2560%" height="15" fill="rgb(245,192,40)"/><text x="0.7331%" y="350.50">deepcopy (copy.py:180)</text></g><g><title>_reconstruct (copy.py:280) (88 samples, 21.26%)</title><rect x="0.4831%" y="356" width="21.2560%" height="15" fill="rgb(238,167,29)"/><text x="0.7331%" y="366.50">_reconstruct (copy.py:280)</text></g><g><title>deepcopy (copy.py:150) (88 samples, 21.26%)</title><rect x="0.4831%" y="372" width="21.2560%" height="15" fill="rgb(232,182,51)"/><text x="0.7331%" y="382.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_dict (copy.py:240) (88 samples, 21.26%)</title><rect x="0.4831%" y="388" width="21.2560%" height="15" fill="rgb(231,60,39)"/><text x="0.7331%" y="398.50">_deepcopy_dict (copy.py:240)</text></g><g><title>deepcopy (copy.py:150) (88 samples, 21.26%)</title><rect x="0.4831%" y="404" width="21.2560%" height="15" fill="rgb(208,69,12)"/><text x="0.7331%" y="414.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_dict (copy.py:240) (88 samples, 21.26%)</title><rect x="0.4831%" y="420" width="21.2560%" height="15" fill="rgb(235,93,37)"/><text x="0.7331%" y="430.50">_deepcopy_dict (copy.py:240)</text></g><g><title>deepcopy (copy.py:180) (85 samples, 20.53%)</title><rect x="1.2077%" y="436" width="20.5314%" height="15" fill="rgb(213,116,39)"/><text x="1.4577%" y="446.50">deepcopy (copy.py:180)</text></g><g><title>_reconstruct (copy.py:280) (80 samples, 19.32%)</title><rect x="2.4155%" y="452" width="19.3237%" height="15" fill="rgb(222,207,29)"/><text x="2.6655%" y="462.50">_reconstruct (copy.py:280)</text></g><g><title>deepcopy (copy.py:150) (79 samples, 19.08%)</title><rect x="2.6570%" y="468" width="19.0821%" height="15" fill="rgb(206,96,30)"/><text x="2.9070%" y="478.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_dict (copy.py:240) (79 samples, 19.08%)</title><rect x="2.6570%" y="484" width="19.0821%" height="15" fill="rgb(218,138,4)"/><text x="2.9070%" y="494.50">_deepcopy_dict (copy.py:240)</text></g><g><title>_connect_5_into_a_line (connect5game.py:108) (7 samples, 1.69%)</title><rect x="22.4638%" y="148" width="1.6908%" height="15" fill="rgb(250,191,14)"/><text x="22.7138%" y="158.50"></text></g><g><title>_connect_5_into_a_line (connect5game.py:58) (11 samples, 2.66%)</title><rect x="25.8454%" y="148" width="2.6570%" height="15" fill="rgb(239,60,40)"/><text x="26.0954%" y="158.50">_c..</text></g><g><title>_connect_5_into_a_line (connect5game.py:59) (6 samples, 1.45%)</title><rect x="28.5024%" y="148" width="1.4493%" height="15" fill="rgb(206,27,48)"/><text x="28.7524%" y="158.50"></text></g><g><title>_connect_5_into_a_line (connect5game.py:74) (6 samples, 1.45%)</title><rect x="30.6763%" y="148" width="1.4493%" height="15" fill="rgb(225,35,8)"/><text x="30.9263%" y="158.50"></text></g><g><title>_connect_5_into_a_line (connect5game.py:75) (9 samples, 2.17%)</title><rect x="32.1256%" y="148" width="2.1739%" height="15" fill="rgb(250,213,24)"/><text x="32.3756%" y="158.50">_..</text></g><g><title>is_final_state (connect5game.py:123) (67 samples, 16.18%)</title><rect x="21.7391%" y="132" width="16.1836%" height="15" fill="rgb(247,123,22)"/><text x="21.9891%" y="142.50">is_final_state (connect5g..</text></g><g><title>_connect_5_into_a_line (connect5game.py:108) (5 samples, 1.21%)</title><rect x="37.9227%" y="148" width="1.2077%" height="15" fill="rgb(231,138,38)"/><text x="38.1727%" y="158.50"></text></g><g><title>_connect_5_into_a_line (connect5game.py:58) (7 samples, 1.69%)</title><rect x="39.6135%" y="148" width="1.6908%" height="15" fill="rgb(231,145,46)"/><text x="39.8635%" y="158.50"></text></g><g><title>_connect_5_into_a_line (connect5game.py:74) (7 samples, 1.69%)</title><rect x="42.7536%" y="148" width="1.6908%" height="15" fill="rgb(251,118,11)"/><text x="43.0036%" y="158.50"></text></g><g><title>_connect_5_into_a_line (connect5game.py:75) (7 samples, 1.69%)</title><rect x="44.4444%" y="148" width="1.6908%" height="15" fill="rgb(217,147,25)"/><text x="44.6944%" y="158.50"></text></g><g><title>is_final_state (connect5game.py:127) (49 samples, 11.84%)</title><rect x="37.9227%" y="132" width="11.8357%" height="15" fill="rgb(247,81,37)"/><text x="38.1727%" y="142.50">is_final_state (co..</text></g><g><title>_simulate_random_game_for_state (mctsagent.py:222) (120 samples, 28.99%)</title><rect x="21.7391%" y="100" width="28.9855%" height="15" fill="rgb(209,12,38)"/><text x="21.9891%" y="110.50">_simulate_random_game_for_state (mctsagent.py:2..</text></g><g><title>is_over (game.py:117) (120 samples, 28.99%)</title><rect x="21.7391%" y="116" width="28.9855%" height="15" fill="rgb(227,1,9)"/><text x="21.9891%" y="126.50">is_over (game.py:117)</text></g><g><title>get_legal_points (board.py:110) (8 samples, 1.93%)</title><rect x="51.2077%" y="132" width="1.9324%" height="15" fill="rgb(248,47,43)"/><text x="51.4577%" y="142.50">g..</text></g><g><title>__new__ (&lt;string&gt;:1) (5 samples, 1.21%)</title><rect x="51.9324%" y="148" width="1.2077%" height="15" fill="rgb(221,10,30)"/><text x="52.1824%" y="158.50"></text></g><g><title>get_legal_points (board.py:111) (13 samples, 3.14%)</title><rect x="53.1401%" y="132" width="3.1401%" height="15" fill="rgb(210,229,1)"/><text x="53.3901%" y="142.50">get..</text></g><g><title>is_free_point (board.py:116) (9 samples, 2.17%)</title><rect x="54.1063%" y="148" width="2.1739%" height="15" fill="rgb(222,148,37)"/><text x="54.3563%" y="158.50">i..</text></g><g><title>get_piece_at_point (board.py:104) (5 samples, 1.21%)</title><rect x="55.0725%" y="164" width="1.2077%" height="15" fill="rgb(234,67,33)"/><text x="55.3225%" y="174.50"></text></g><g><title>select_move (randomagent.py:10) (24 samples, 5.80%)</title><rect x="50.9662%" y="116" width="5.7971%" height="15" fill="rgb(247,98,35)"/><text x="51.2162%" y="126.50">select_..</text></g><g><title>select_move (randomagent.py:11) (9 samples, 2.17%)</title><rect x="56.7633%" y="116" width="2.1739%" height="15" fill="rgb(247,138,52)"/><text x="57.0133%" y="126.50">s..</text></g><g><title>&lt;listcomp&gt; (randomagent.py:11) (9 samples, 2.17%)</title><rect x="56.7633%" y="132" width="2.1739%" height="15" fill="rgb(213,79,30)"/><text x="57.0133%" y="142.50">&lt;..</text></g><g><title>_simulate_random_game_for_state (mctsagent.py:223) (36 samples, 8.70%)</title><rect x="50.7246%" y="100" width="8.6957%" height="15" fill="rgb(246,177,23)"/><text x="50.9746%" y="110.50">_simulate_ra..</text></g><g><title>&lt;genexpr&gt; (copy.py:273) (8 samples, 1.93%)</title><rect x="70.7729%" y="276" width="1.9324%" height="15" fill="rgb(230,62,27)"/><text x="71.0229%" y="286.50">&lt;..</text></g><g><title>_reconstruct (copy.py:274) (18 samples, 4.35%)</title><rect x="69.3237%" y="260" width="4.3478%" height="15" fill="rgb(216,154,8)"/><text x="69.5737%" y="270.50">_reco..</text></g><g><title>deepcopy (copy.py:141) (5 samples, 1.21%)</title><rect x="77.5362%" y="308" width="1.2077%" height="15" fill="rgb(244,35,45)"/><text x="77.7862%" y="318.50"></text></g><g><title>deepcopy (copy.py:148) (7 samples, 1.69%)</title><rect x="79.7101%" y="308" width="1.6908%" height="15" fill="rgb(251,115,12)"/><text x="79.9601%" y="318.50"></text></g><g><title>deepcopy (copy.py:150) (29 samples, 7.00%)</title><rect x="75.1208%" y="276" width="7.0048%" height="15" fill="rgb(240,54,50)"/><text x="75.3708%" y="286.50">deepcopy ..</text></g><g><title>_deepcopy_dict (copy.py:240) (22 samples, 5.31%)</title><rect x="76.8116%" y="292" width="5.3140%" height="15" fill="rgb(233,84,52)"/><text x="77.0616%" y="302.50">_deepco..</text></g><g><title>_reconstruct (copy.py:280) (41 samples, 9.90%)</title><rect x="74.3961%" y="260" width="9.9034%" height="15" fill="rgb(207,117,47)"/><text x="74.6461%" y="270.50">_reconstruct (..</text></g><g><title>deepcopy (copy.py:185) (7 samples, 1.69%)</title><rect x="82.6087%" y="276" width="1.6908%" height="15" fill="rgb(249,43,39)"/><text x="82.8587%" y="286.50"></text></g><g><title>deepcopy (copy.py:180) (79 samples, 19.08%)</title><rect x="66.9082%" y="244" width="19.0821%" height="15" fill="rgb(209,38,44)"/><text x="67.1582%" y="254.50">deepcopy (copy.py:180)</text></g><g><title>_deepcopy_dict (copy.py:240) (106 samples, 25.60%)</title><rect x="61.8357%" y="228" width="25.6039%" height="15" fill="rgb(236,212,23)"/><text x="62.0857%" y="238.50">_deepcopy_dict (copy.py:240)</text></g><g><title>deepcopy (copy.py:185) (6 samples, 1.45%)</title><rect x="85.9903%" y="244" width="1.4493%" height="15" fill="rgb(242,79,21)"/><text x="86.2403%" y="254.50"></text></g><g><title>deepcopy (copy.py:180) (121 samples, 29.23%)</title><rect x="60.1449%" y="148" width="29.2271%" height="15" fill="rgb(211,96,35)"/><text x="60.3949%" y="158.50">deepcopy (copy.py:180)</text></g><g><title>_reconstruct (copy.py:280) (118 samples, 28.50%)</title><rect x="60.8696%" y="164" width="28.5024%" height="15" fill="rgb(253,215,40)"/><text x="61.1196%" y="174.50">_reconstruct (copy.py:280)</text></g><g><title>deepcopy (copy.py:150) (118 samples, 28.50%)</title><rect x="60.8696%" y="180" width="28.5024%" height="15" fill="rgb(211,81,21)"/><text x="61.1196%" y="190.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_dict (copy.py:240) (118 samples, 28.50%)</title><rect x="60.8696%" y="196" width="28.5024%" height="15" fill="rgb(208,190,38)"/><text x="61.1196%" y="206.50">_deepcopy_dict (copy.py:240)</text></g><g><title>deepcopy (copy.py:150) (117 samples, 28.26%)</title><rect x="61.1111%" y="212" width="28.2609%" height="15" fill="rgb(235,213,38)"/><text x="61.3611%" y="222.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_tuple (copy.py:220) (5 samples, 1.21%)</title><rect x="88.1643%" y="228" width="1.2077%" height="15" fill="rgb(237,122,38)"/><text x="88.4143%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (copy.py:220) (5 samples, 1.21%)</title><rect x="88.1643%" y="244" width="1.2077%" height="15" fill="rgb(244,218,35)"/><text x="88.4143%" y="254.50"></text></g><g><title>look_ahead_next_move (game.py:127) (125 samples, 30.19%)</title><rect x="59.4203%" y="132" width="30.1932%" height="15" fill="rgb(240,68,47)"/><text x="59.6703%" y="142.50">look_ahead_next_move (game.py:127)</text></g><g><title>_simulate_random_game_for_state (mctsagent.py:224) (128 samples, 30.92%)</title><rect x="59.4203%" y="100" width="30.9179%" height="15" fill="rgb(210,16,53)"/><text x="59.6703%" y="110.50">_simulate_random_game_for_state (mctsagent.py:224)</text></g><g><title>apply_move (game.py:123) (128 samples, 30.92%)</title><rect x="59.4203%" y="116" width="30.9179%" height="15" fill="rgb(235,124,12)"/><text x="59.6703%" y="126.50">apply_move (game.py:123)</text></g><g><title>&lt;module&gt; (test.py:38) (378 samples, 91.30%)</title><rect x="0.0000%" y="52" width="91.3043%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="62.50">&lt;module&gt; (test.py:38)</text></g><g><title>evaluate (test.py:23) (378 samples, 91.30%)</title><rect x="0.0000%" y="68" width="91.3043%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="78.50">evaluate (test.py:23)</text></g><g><title>select_move (mctsagent.py:183) (378 samples, 91.30%)</title><rect x="0.0000%" y="84" width="91.3043%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="94.50">select_move (mctsagent.py:183)</text></g><g><title>&lt;module&gt; (numpy/__init__.py:142) (6 samples, 1.45%)</title><rect x="91.7874%" y="244" width="1.4493%" height="15" fill="rgb(230,116,27)"/><text x="92.0374%" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (6 samples, 1.45%)</title><rect x="91.7874%" y="260" width="1.4493%" height="15" fill="rgb(228,99,48)"/><text x="92.0374%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.45%)</title><rect x="91.7874%" y="276" width="1.4493%" height="15" fill="rgb(253,11,6)"/><text x="92.0374%" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.45%)</title><rect x="91.7874%" y="292" width="1.4493%" height="15" fill="rgb(247,143,39)"/><text x="92.0374%" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.45%)</title><rect x="91.7874%" y="308" width="1.4493%" height="15" fill="rgb(236,97,10)"/><text x="92.0374%" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.45%)</title><rect x="91.7874%" y="324" width="1.4493%" height="15" fill="rgb(233,208,19)"/><text x="92.0374%" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.45%)</title><rect x="91.7874%" y="340" width="1.4493%" height="15" fill="rgb(216,164,2)"/><text x="92.0374%" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.45%)</title><rect x="91.7874%" y="356" width="1.4493%" height="15" fill="rgb(220,129,5)"/><text x="92.0374%" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/add_newdocs.py:13) (6 samples, 1.45%)</title><rect x="91.7874%" y="372" width="1.4493%" height="15" fill="rgb(242,17,10)"/><text x="92.0374%" y="382.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.45%)</title><rect x="91.7874%" y="388" width="1.4493%" height="15" fill="rgb(242,107,0)"/><text x="92.0374%" y="398.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.21%)</title><rect x="92.0290%" y="404" width="1.2077%" height="15" fill="rgb(251,28,31)"/><text x="92.2790%" y="414.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.21%)</title><rect x="92.0290%" y="420" width="1.2077%" height="15" fill="rgb(233,223,10)"/><text x="92.2790%" y="430.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.21%)</title><rect x="92.0290%" y="436" width="1.2077%" height="15" fill="rgb(215,21,27)"/><text x="92.2790%" y="446.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.21%)</title><rect x="92.0290%" y="452" width="1.2077%" height="15" fill="rgb(232,23,21)"/><text x="92.2790%" y="462.50"></text></g><g><title>&lt;module&gt; (utils.py:43) (8 samples, 1.93%)</title><rect x="91.7874%" y="148" width="1.9324%" height="15" fill="rgb(244,5,23)"/><text x="92.0374%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.93%)</title><rect x="91.7874%" y="164" width="1.9324%" height="15" fill="rgb(226,81,46)"/><text x="92.0374%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.93%)</title><rect x="91.7874%" y="180" width="1.9324%" height="15" fill="rgb(247,70,30)"/><text x="92.0374%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.93%)</title><rect x="91.7874%" y="196" width="1.9324%" height="15" fill="rgb(212,68,19)"/><text x="92.0374%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.93%)</title><rect x="91.7874%" y="212" width="1.9324%" height="15" fill="rgb(240,187,13)"/><text x="92.0374%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.93%)</title><rect x="91.7874%" y="228" width="1.9324%" height="15" fill="rgb(223,113,26)"/><text x="92.0374%" y="238.50">_..</text></g><g><title>all (414 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (test.py:5) (36 samples, 8.70%)</title><rect x="91.3043%" y="52" width="8.6957%" height="15" fill="rgb(241,108,4)"/><text x="91.5543%" y="62.50">&lt;module&gt; (te..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (36 samples, 8.70%)</title><rect x="91.3043%" y="68" width="8.6957%" height="15" fill="rgb(247,173,49)"/><text x="91.5543%" y="78.50">_find_and_lo..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (36 samples, 8.70%)</title><rect x="91.3043%" y="84" width="8.6957%" height="15" fill="rgb(224,114,35)"/><text x="91.5543%" y="94.50">_find_and_lo..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (36 samples, 8.70%)</title><rect x="91.3043%" y="100" width="8.6957%" height="15" fill="rgb(245,159,27)"/><text x="91.5543%" y="110.50">_load_unlock..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (36 samples, 8.70%)</title><rect x="91.3043%" y="116" width="8.6957%" height="15" fill="rgb(245,172,44)"/><text x="91.5543%" y="126.50">exec_module ..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (36 samples, 8.70%)</title><rect x="91.3043%" y="132" width="8.6957%" height="15" fill="rgb(236,23,11)"/><text x="91.5543%" y="142.50">_call_with_f..</text></g><g><title>&lt;module&gt; (utils.py:44) (26 samples, 6.28%)</title><rect x="93.7198%" y="148" width="6.2802%" height="15" fill="rgb(205,117,38)"/><text x="93.9698%" y="158.50">&lt;module&gt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (26 samples, 6.28%)</title><rect x="93.7198%" y="164" width="6.2802%" height="15" fill="rgb(237,72,25)"/><text x="93.9698%" y="174.50">_find_an..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (26 samples, 6.28%)</title><rect x="93.7198%" y="180" width="6.2802%" height="15" fill="rgb(244,70,9)"/><text x="93.9698%" y="190.50">_find_an..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (26 samples, 6.28%)</title><rect x="93.7198%" y="196" width="6.2802%" height="15" fill="rgb(217,125,39)"/><text x="93.9698%" y="206.50">_load_un..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (26 samples, 6.28%)</title><rect x="93.7198%" y="212" width="6.2802%" height="15" fill="rgb(235,36,10)"/><text x="93.9698%" y="222.50">exec_mod..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (26 samples, 6.28%)</title><rect x="93.7198%" y="228" width="6.2802%" height="15" fill="rgb(251,123,47)"/><text x="93.9698%" y="238.50">_call_wi..</text></g><g><title>&lt;module&gt; (torch/__init__.py:81) (12 samples, 2.90%)</title><rect x="97.1014%" y="244" width="2.8986%" height="15" fill="rgb(221,13,13)"/><text x="97.3514%" y="254.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 2.90%)</title><rect x="97.1014%" y="260" width="2.8986%" height="15" fill="rgb(238,131,9)"/><text x="97.3514%" y="270.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 2.90%)</title><rect x="97.1014%" y="276" width="2.8986%" height="15" fill="rgb(211,50,8)"/><text x="97.3514%" y="286.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (12 samples, 2.90%)</title><rect x="97.1014%" y="292" width="2.8986%" height="15" fill="rgb(245,182,24)"/><text x="97.3514%" y="302.50">_l..</text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (12 samples, 2.90%)</title><rect x="97.1014%" y="308" width="2.8986%" height="15" fill="rgb(242,14,37)"/><text x="97.3514%" y="318.50">mo..</text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (12 samples, 2.90%)</title><rect x="97.1014%" y="324" width="2.8986%" height="15" fill="rgb(246,228,12)"/><text x="97.3514%" y="334.50">cr..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 2.90%)</title><rect x="97.1014%" y="340" width="2.8986%" height="15" fill="rgb(213,55,15)"/><text x="97.3514%" y="350.50">_c..</text></g></svg></svg>